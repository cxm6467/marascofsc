name: Deploy MarascoFSC Infrastructure and Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      cloudfront-distribution-id: ${{ steps.terraform-outputs.outputs.distribution-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Infrastructure
        aws-region: us-east-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Setup Terraform state storage
      run: |
        # Check if bucket exists for state storage, if not Terraform will create it
        echo "Terraform will manage S3 bucket creation and configuration"

    - name: Terraform Init
      working-directory: ./iac
      run: terraform init

    - name: Terraform Plan
      working-directory: ./iac
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      working-directory: ./iac
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform outputs
      id: terraform-outputs
      working-directory: ./iac
      run: |
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
        echo "distribution-id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
        echo "CloudFront Distribution ID: $DISTRIBUTION_ID"

  deploy-website:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-Deploy
        aws-region: us-east-1
        
    - name: Sync to S3 with optimal caching
      run: |
        # Sync HTML files with short cache
        aws s3 sync . s3://marascofsc-website-2025 \
          --exclude "*" \
          --include "*.html" \
          --cache-control "public, max-age=300" \
          --delete
          
        # Clean and sync CSS with longer cache (ensures correct Content-Type)
        if [ -d "css" ]; then
          aws s3 rm s3://marascofsc-website-2025/css --recursive || true
          for file in css/*.css; do
            if [ -f "$file" ]; then
              aws s3 cp "$file" "s3://marascofsc-website-2025/$file" \
                --cache-control "public, max-age=31536000" \
                --content-type "text/css"
            fi
          done
        fi

        # Clean and sync JS with longer cache (ensures correct Content-Type)
        if [ -d "js" ]; then
          aws s3 rm s3://marascofsc-website-2025/js --recursive || true
          for file in js/*.js; do
            if [ -f "$file" ]; then
              aws s3 cp "$file" "s3://marascofsc-website-2025/$file" \
                --cache-control "public, max-age=31536000" \
                --content-type "application/javascript"
            fi
          done
        fi
          
        # Sync images with long cache (upload directory to matching prefix)
        if [ -d "media" ]; then
          aws s3 sync media s3://marascofsc-website-2025/media \
            --cache-control "public, max-age=31536000" \
            --delete
        fi
          
        # Sync remaining files at repo root (excluding managed folders)
        aws s3 sync . s3://marascofsc-website-2025 \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "css/*" \
          --exclude "js/*" \
          --exclude "media/*" \
          --exclude "*.md" \
          --exclude ".gitignore" \
          --exclude "*.html" \
          --delete
          
    - name: Invalidate CloudFront cache
      run: |
        DISTRIBUTION_ID="${{ needs.deploy-infrastructure.outputs.cloudfront-distribution-id }}"
        if [ ! -z "$DISTRIBUTION_ID" ] && [ "$DISTRIBUTION_ID" != "None" ]; then
          echo "Invalidating CloudFront distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"
        else
          echo "No CloudFront distribution ID available"
        fi